//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLX3DSettingsServices2 : IADLX3DSettingsServices1 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLX3DSettingsServices2(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLX3DSettingsServices2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLX3DSettingsServices2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLX3DSettingsServices2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLX3DSettingsServices2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLX3DSettingsServices2_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT GetImageSharpenDesktop(IADLXGPU pGPU, SWIGTYPE_p_p_adlx__IADLX3DImageSharpenDesktop pp3DImageSharpenDesktop) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DSettingsServices2_GetImageSharpenDesktop(swigCPtr, IADLXGPU.getCPtr(pGPU), SWIGTYPE_p_p_adlx__IADLX3DImageSharpenDesktop.getCPtr(pp3DImageSharpenDesktop));
    return ret;
  }

}
