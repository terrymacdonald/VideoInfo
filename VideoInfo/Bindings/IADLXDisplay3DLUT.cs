//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXDisplay3DLUT : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXDisplay3DLUT(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXDisplay3DLUT_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXDisplay3DLUT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXDisplay3DLUT obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXDisplay3DLUT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXDisplay3DLUT_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedSCE(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsSupportedSCE(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedSCEVividGaming(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsSupportedSCEVividGaming(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentSCEDisabled(SWIGTYPE_p_bool sceDisabled) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsCurrentSCEDisabled(swigCPtr, SWIGTYPE_p_bool.getCPtr(sceDisabled));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentSCEVividGaming(SWIGTYPE_p_bool vividGaming) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsCurrentSCEVividGaming(swigCPtr, SWIGTYPE_p_bool.getCPtr(vividGaming));
    return ret;
  }

  public virtual ADLX_RESULT SetSCEDisabled() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetSCEDisabled(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetSCEVividGaming() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetSCEVividGaming(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedSCEDynamicContrast(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsSupportedSCEDynamicContrast(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentSCEDynamicContrast(SWIGTYPE_p_bool dynamicContrast) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsCurrentSCEDynamicContrast(swigCPtr, SWIGTYPE_p_bool.getCPtr(dynamicContrast));
    return ret;
  }

  public virtual ADLX_RESULT GetSCEDynamicContrastRange(ADLX_IntRange range) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetSCEDynamicContrastRange(swigCPtr, ADLX_IntRange.getCPtr(range));
    return ret;
  }

  public virtual ADLX_RESULT GetSCEDynamicContrast(SWIGTYPE_p_int contrast) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetSCEDynamicContrast(swigCPtr, SWIGTYPE_p_int.getCPtr(contrast));
    return ret;
  }

  public virtual ADLX_RESULT SetSCEDynamicContrast(int contrast) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetSCEDynamicContrast(swigCPtr, contrast);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedUser3DLUT(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_IsSupportedUser3DLUT(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT ClearUser3DLUT() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_ClearUser3DLUT(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT GetSDRUser3DLUT(SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, SWIGTYPE_p_ADLX_3DLUT_COLORSPACE colorSpace, SWIGTYPE_p_int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetSDRUser3DLUT(swigCPtr, SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION.getCPtr(transferFunction), SWIGTYPE_p_ADLX_3DLUT_COLORSPACE.getCPtr(colorSpace), SWIGTYPE_p_int.getCPtr(pointsNumber), ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT SetSDRUser3DLUT(ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, ADLX_3DLUT_COLORSPACE colorSpace, int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetSDRUser3DLUT(swigCPtr, (int)transferFunction, (int)colorSpace, pointsNumber, ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT GetHDRUser3DLUT(SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, SWIGTYPE_p_ADLX_3DLUT_COLORSPACE colorSpace, SWIGTYPE_p_int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetHDRUser3DLUT(swigCPtr, SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION.getCPtr(transferFunction), SWIGTYPE_p_ADLX_3DLUT_COLORSPACE.getCPtr(colorSpace), SWIGTYPE_p_int.getCPtr(pointsNumber), ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT SetHDRUser3DLUT(ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, ADLX_3DLUT_COLORSPACE colorSpace, int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetHDRUser3DLUT(swigCPtr, (int)transferFunction, (int)colorSpace, pointsNumber, ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT GetAllUser3DLUT(SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, SWIGTYPE_p_ADLX_3DLUT_COLORSPACE colorSpace, SWIGTYPE_p_int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetAllUser3DLUT(swigCPtr, SWIGTYPE_p_ADLX_3DLUT_TRANSFER_FUNCTION.getCPtr(transferFunction), SWIGTYPE_p_ADLX_3DLUT_COLORSPACE.getCPtr(colorSpace), SWIGTYPE_p_int.getCPtr(pointsNumber), ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT SetAllUser3DLUT(ADLX_3DLUT_TRANSFER_FUNCTION transferFunction, ADLX_3DLUT_COLORSPACE colorSpace, int pointsNumber, ADLX_3DLUT_Data data) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_SetAllUser3DLUT(swigCPtr, (int)transferFunction, (int)colorSpace, pointsNumber, ADLX_3DLUT_Data.getCPtr(data));
    return ret;
  }

  public virtual ADLX_RESULT GetUser3DLUTIndex(int lutSize, ADLX_UINT16_RGB rgbCoordinate, SWIGTYPE_p_int index) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplay3DLUT_GetUser3DLUTIndex(swigCPtr, lutSize, ADLX_UINT16_RGB.getCPtr(rgbCoordinate), SWIGTYPE_p_int.getCPtr(index));
    return ret;
  }

}
