//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXDisplayVariBright : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXDisplayVariBright(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXDisplayVariBright_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXDisplayVariBright obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXDisplayVariBright obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXDisplayVariBright(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXDisplayVariBright_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupported(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsSupported(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsEnabled(SWIGTYPE_p_bool enabled) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsEnabled(swigCPtr, SWIGTYPE_p_bool.getCPtr(enabled));
    return ret;
  }

  public virtual ADLX_RESULT SetEnabled(bool enabled) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetEnabled(swigCPtr, enabled);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentMaximizeBrightness(SWIGTYPE_p_bool maximizeBrightness) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsCurrentMaximizeBrightness(swigCPtr, SWIGTYPE_p_bool.getCPtr(maximizeBrightness));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentOptimizeBrightness(SWIGTYPE_p_bool optimizeBrightness) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsCurrentOptimizeBrightness(swigCPtr, SWIGTYPE_p_bool.getCPtr(optimizeBrightness));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentBalanced(SWIGTYPE_p_bool balanced) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsCurrentBalanced(swigCPtr, SWIGTYPE_p_bool.getCPtr(balanced));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentOptimizeBattery(SWIGTYPE_p_bool optimizeBattery) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsCurrentOptimizeBattery(swigCPtr, SWIGTYPE_p_bool.getCPtr(optimizeBattery));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentMaximizeBattery(SWIGTYPE_p_bool maximizeBattery) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_IsCurrentMaximizeBattery(swigCPtr, SWIGTYPE_p_bool.getCPtr(maximizeBattery));
    return ret;
  }

  public virtual ADLX_RESULT SetMaximizeBrightness() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetMaximizeBrightness(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetOptimizeBrightness() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetOptimizeBrightness(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetBalanced() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetBalanced(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetOptimizeBattery() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetOptimizeBattery(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetMaximizeBattery() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayVariBright_SetMaximizeBattery(swigCPtr);
    return ret;
  }

}
