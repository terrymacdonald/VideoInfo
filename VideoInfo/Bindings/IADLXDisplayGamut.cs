//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXDisplayGamut : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXDisplayGamut(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXDisplayGamut_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXDisplayGamut obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXDisplayGamut obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXDisplayGamut(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXDisplayGamut_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCCIR709ColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCCIR709ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCCIR601ColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCCIR601ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedAdobeRgbColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedAdobeRgbColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCIERgbColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCIERgbColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCCIR2020ColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCCIR2020ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCustomColorSpace(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCustomColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupported5000kWhitePoint(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupported5000kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupported6500kWhitePoint(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupported6500kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupported7500kWhitePoint(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupported7500kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupported9300kWhitePoint(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupported9300kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedCustomWhitePoint(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsSupportedCustomWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrent5000kWhitePoint(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrent5000kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrent6500kWhitePoint(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrent6500kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrent7500kWhitePoint(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrent7500kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrent9300kWhitePoint(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrent9300kWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCustomWhitePoint(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCustomWhitePoint(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT GetWhitePoint(ADLX_Point point) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_GetWhitePoint(swigCPtr, ADLX_Point.getCPtr(point));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCCIR709ColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCCIR709ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCCIR601ColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCCIR601ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentAdobeRgbColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentAdobeRgbColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCIERgbColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCIERgbColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCCIR2020ColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCCIR2020ColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentCustomColorSpace(SWIGTYPE_p_bool isSet) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_IsCurrentCustomColorSpace(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSet));
    return ret;
  }

  public virtual ADLX_RESULT GetGamutColorSpace(ADLX_GamutColorSpace gamutColorSpace) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_GetGamutColorSpace(swigCPtr, ADLX_GamutColorSpace.getCPtr(gamutColorSpace));
    return ret;
  }

  public virtual ADLX_RESULT SetGamut(ADLX_WHITE_POINT predefinedWhitePoint, ADLX_GAMUT_SPACE predefinedGamutSpace) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_SetGamut__SWIG_0(swigCPtr, (int)predefinedWhitePoint, (int)predefinedGamutSpace);
    return ret;
  }

  public virtual ADLX_RESULT SetGamut(ADLX_RGB customWhitePoint, ADLX_GAMUT_SPACE predefinedGamutSpace) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_SetGamut__SWIG_1(swigCPtr, ADLX_RGB.getCPtr(customWhitePoint), (int)predefinedGamutSpace);
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ADLX_RESULT SetGamut(ADLX_WHITE_POINT predefinedWhitePoint, ADLX_GamutColorSpace customGamut) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_SetGamut__SWIG_2(swigCPtr, (int)predefinedWhitePoint, ADLX_GamutColorSpace.getCPtr(customGamut));
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ADLX_RESULT SetGamut(ADLX_RGB customWhitePoint, ADLX_GamutColorSpace customGamut) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamut_SetGamut__SWIG_3(swigCPtr, ADLX_RGB.getCPtr(customWhitePoint), ADLX_GamutColorSpace.getCPtr(customGamut));
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
