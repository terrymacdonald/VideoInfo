//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXDesktop : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXDesktop(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXDesktop_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXDesktop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXDesktop obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXDesktop(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXDesktop_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT Orientation(SWIGTYPE_p_ADLX_ORIENTATION orientation) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_Orientation(swigCPtr, SWIGTYPE_p_ADLX_ORIENTATION.getCPtr(orientation));
    return ret;
  }

  public virtual ADLX_RESULT Size(SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_Size(swigCPtr, SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
    return ret;
  }

  public virtual ADLX_RESULT TopLeft(ADLX_Point locationTopLeft) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_TopLeft(swigCPtr, ADLX_Point.getCPtr(locationTopLeft));
    return ret;
  }

  public virtual ADLX_RESULT Type(SWIGTYPE_p_ADLX_DESKTOP_TYPE desktopType) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_Type(swigCPtr, SWIGTYPE_p_ADLX_DESKTOP_TYPE.getCPtr(desktopType));
    return ret;
  }

  public virtual ADLX_RESULT GetNumberOfDisplays(SWIGTYPE_p_unsigned_int numDisplays) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_GetNumberOfDisplays(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(numDisplays));
    return ret;
  }

  public virtual ADLX_RESULT GetDisplays(SWIGTYPE_p_p_adlx__IADLXDisplayList ppDisplays) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDesktop_GetDisplays(swigCPtr, SWIGTYPE_p_p_adlx__IADLXDisplayList.getCPtr(ppDisplays));
    return ret;
  }

}
