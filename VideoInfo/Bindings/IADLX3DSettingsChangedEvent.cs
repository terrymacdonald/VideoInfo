//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLX3DSettingsChangedEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IADLX3DSettingsChangedEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLX3DSettingsChangedEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLX3DSettingsChangedEvent obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IADLX3DSettingsChangedEvent() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLX3DSettingsChangedEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT GetGPU(SWIGTYPE_p_p_adlx__IADLXGPU ppGPU) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DSettingsChangedEvent_GetGPU(swigCPtr, SWIGTYPE_p_p_adlx__IADLXGPU.getCPtr(ppGPU));
    return ret;
  }

  public virtual bool IsAntiLagChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsAntiLagChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsChillChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsChillChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsBoostChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsBoostChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsImageSharpeningChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsImageSharpeningChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsEnhancedSyncChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsEnhancedSyncChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsWaitForVerticalRefreshChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsWaitForVerticalRefreshChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsFrameRateTargetControlChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsFrameRateTargetControlChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsAntiAliasingChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsAntiAliasingChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsMorphologicalAntiAliasingChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsMorphologicalAntiAliasingChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsAnisotropicFilteringChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsAnisotropicFilteringChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsTessellationModeChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsTessellationModeChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsRadeonSuperResolutionChanged() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsRadeonSuperResolutionChanged(swigCPtr);
    return ret;
  }

  public virtual bool IsResetShaderCache() {
    bool ret = ADLXPINVOKE.IADLX3DSettingsChangedEvent_IsResetShaderCache(swigCPtr);
    return ret;
  }

}
