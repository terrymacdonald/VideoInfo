//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLX3DChill : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLX3DChill(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLX3DChill_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLX3DChill obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLX3DChill obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLX3DChill(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLX3DChill_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsSupported(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_IsSupported(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT IsEnabled(SWIGTYPE_p_bool isEnabled) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_IsEnabled(swigCPtr, SWIGTYPE_p_bool.getCPtr(isEnabled));
    return ret;
  }

  public virtual ADLX_RESULT GetFPSRange(ADLX_IntRange range) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_GetFPSRange(swigCPtr, ADLX_IntRange.getCPtr(range));
    return ret;
  }

  public virtual ADLX_RESULT GetMinFPS(SWIGTYPE_p_int currentMinFPS) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_GetMinFPS(swigCPtr, SWIGTYPE_p_int.getCPtr(currentMinFPS));
    return ret;
  }

  public virtual ADLX_RESULT GetMaxFPS(SWIGTYPE_p_int currentMaxFPS) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_GetMaxFPS(swigCPtr, SWIGTYPE_p_int.getCPtr(currentMaxFPS));
    return ret;
  }

  public virtual ADLX_RESULT SetEnabled(bool enable) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_SetEnabled(swigCPtr, enable);
    return ret;
  }

  public virtual ADLX_RESULT SetMinFPS(int minFPS) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_SetMinFPS(swigCPtr, minFPS);
    return ret;
  }

  public virtual ADLX_RESULT SetMaxFPS(int maxFPS) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLX3DChill_SetMaxFPS(swigCPtr, maxFPS);
    return ret;
  }

}
