//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXDisplayGamma : IADLXInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXDisplayGamma(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXDisplayGamma_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXDisplayGamma obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXDisplayGamma obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXDisplayGamma(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXDisplayGamma_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGammaRamp(SWIGTYPE_p_bool isReGammaRamp) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGammaRamp(swigCPtr, SWIGTYPE_p_bool.getCPtr(isReGammaRamp));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentDeGammaRamp(SWIGTYPE_p_bool isDeGammaRamp) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentDeGammaRamp(swigCPtr, SWIGTYPE_p_bool.getCPtr(isDeGammaRamp));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentRegammaCoefficient(SWIGTYPE_p_bool isRegammaCoeff) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentRegammaCoefficient(swigCPtr, SWIGTYPE_p_bool.getCPtr(isRegammaCoeff));
    return ret;
  }

  public virtual ADLX_RESULT GetGammaRamp(ADLX_GammaRamp lut) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_GetGammaRamp(swigCPtr, ADLX_GammaRamp.getCPtr(lut));
    return ret;
  }

  public virtual ADLX_RESULT GetGammaCoefficient(ADLX_RegammaCoeff coeff) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_GetGammaCoefficient(swigCPtr, ADLX_RegammaCoeff.getCPtr(coeff));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedReGammaSRGB(SWIGTYPE_p_bool isSupportedRegammaSRGB) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsSupportedReGammaSRGB(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSupportedRegammaSRGB));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedReGammaBT709(SWIGTYPE_p_bool isSupportedReGammaBT709) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsSupportedReGammaBT709(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSupportedReGammaBT709));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedReGammaPQ(SWIGTYPE_p_bool isSupportedReGammaPQ) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsSupportedReGammaPQ(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSupportedReGammaPQ));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedReGammaPQ2084Interim(SWIGTYPE_p_bool isSupportedReGammaPQ2084Interim) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsSupportedReGammaPQ2084Interim(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSupportedReGammaPQ2084Interim));
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedReGamma36(SWIGTYPE_p_bool isSupportedReGamma36) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsSupportedReGamma36(swigCPtr, SWIGTYPE_p_bool.getCPtr(isSupportedReGamma36));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGammaSRGB(SWIGTYPE_p_bool isCurrentReGammaSRGB) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGammaSRGB(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCurrentReGammaSRGB));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGammaBT709(SWIGTYPE_p_bool isCurrentReGammaBT709) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGammaBT709(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCurrentReGammaBT709));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGammaPQ(SWIGTYPE_p_bool isCurrentReGammaPQ) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGammaPQ(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCurrentReGammaPQ));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGammaPQ2084Interim(SWIGTYPE_p_bool isCurrentReGammaPQ2084Interim) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGammaPQ2084Interim(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCurrentReGammaPQ2084Interim));
    return ret;
  }

  public virtual ADLX_RESULT IsCurrentReGamma36(SWIGTYPE_p_bool isCurrentReGamma36) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_IsCurrentReGamma36(swigCPtr, SWIGTYPE_p_bool.getCPtr(isCurrentReGamma36));
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaSRGB() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaSRGB(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaBT709() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaBT709(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaPQ() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaPQ(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaPQ2084Interim() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaPQ2084Interim(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetReGamma36() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGamma36(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaCoefficient(ADLX_RegammaCoeff coeff) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaCoefficient(swigCPtr, ADLX_RegammaCoeff.getCPtr(coeff));
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ADLX_RESULT SetDeGammaRamp(string path) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetDeGammaRamp__SWIG_0(swigCPtr, path);
    return ret;
  }

  public virtual ADLX_RESULT SetDeGammaRamp(ADLX_GammaRamp gammaRamp) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetDeGammaRamp__SWIG_1(swigCPtr, ADLX_GammaRamp.getCPtr(gammaRamp));
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaRamp(string path) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaRamp__SWIG_0(swigCPtr, path);
    return ret;
  }

  public virtual ADLX_RESULT SetReGammaRamp(ADLX_GammaRamp gammaRamp) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_SetReGammaRamp__SWIG_1(swigCPtr, ADLX_GammaRamp.getCPtr(gammaRamp));
    if (ADLXPINVOKE.SWIGPendingException.Pending) throw ADLXPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ADLX_RESULT ResetGammaRamp() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXDisplayGamma_ResetGammaRamp(swigCPtr);
    return ret;
  }

}
