//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IADLXGPU2 : IADLXGPU1 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IADLXGPU2(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ADLXPINVOKE.IADLXGPU2_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IADLXGPU2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IADLXGPU2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ADLXPINVOKE.delete_IADLXGPU2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public new static SWIGTYPE_p_wchar_t IID() {
    global::System.IntPtr cPtr = ADLXPINVOKE.IADLXGPU2_IID();
    SWIGTYPE_p_wchar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public virtual ADLX_RESULT IsPowerOff(SWIGTYPE_p_bool state) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_IsPowerOff(swigCPtr, SWIGTYPE_p_bool.getCPtr(state));
    return ret;
  }

  public virtual ADLX_RESULT PowerOn() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_PowerOn(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT StartPowerOff(IADLXGPUConnectChangedListener pGPUConnectChangedListener, int timeout) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_StartPowerOff(swigCPtr, IADLXGPUConnectChangedListener.getCPtr(pGPUConnectChangedListener), timeout);
    return ret;
  }

  public virtual ADLX_RESULT AbortPowerOff() {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_AbortPowerOff(swigCPtr);
    return ret;
  }

  public virtual ADLX_RESULT IsSupportedApplicationList(SWIGTYPE_p_bool supported) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_IsSupportedApplicationList(swigCPtr, SWIGTYPE_p_bool.getCPtr(supported));
    return ret;
  }

  public virtual ADLX_RESULT GetApplications(SWIGTYPE_p_p_adlx__IADLXApplicationList ppApplications) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_GetApplications(swigCPtr, SWIGTYPE_p_p_adlx__IADLXApplicationList.getCPtr(ppApplications));
    return ret;
  }

  public virtual ADLX_RESULT AMDSoftwareReleaseDate(SWIGTYPE_p_unsigned_int year, SWIGTYPE_p_unsigned_int month, SWIGTYPE_p_unsigned_int day) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_AMDSoftwareReleaseDate(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(year), SWIGTYPE_p_unsigned_int.getCPtr(month), SWIGTYPE_p_unsigned_int.getCPtr(day));
    return ret;
  }

  public virtual ADLX_RESULT AMDSoftwareEdition(SWIGTYPE_p_p_char edition) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_AMDSoftwareEdition(swigCPtr, SWIGTYPE_p_p_char.getCPtr(edition));
    return ret;
  }

  public virtual ADLX_RESULT AMDSoftwareVersion(SWIGTYPE_p_p_char version) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_AMDSoftwareVersion(swigCPtr, SWIGTYPE_p_p_char.getCPtr(version));
    return ret;
  }

  public virtual ADLX_RESULT DriverVersion(SWIGTYPE_p_p_char version) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_DriverVersion(swigCPtr, SWIGTYPE_p_p_char.getCPtr(version));
    return ret;
  }

  public virtual ADLX_RESULT AMDWindowsDriverVersion(SWIGTYPE_p_p_char version) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_AMDWindowsDriverVersion(swigCPtr, SWIGTYPE_p_p_char.getCPtr(version));
    return ret;
  }

  public virtual ADLX_RESULT LUID(ADLX_LUID luid) {
    ADLX_RESULT ret = (ADLX_RESULT)ADLXPINVOKE.IADLXGPU2_LUID(swigCPtr, ADLX_LUID.getCPtr(luid));
    return ret;
  }

}
